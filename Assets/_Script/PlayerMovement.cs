using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.SceneManagement;
using UnityEngine.XR.Interaction.Toolkit;

public class PlayerMovement : MonoBehaviour
{
    public Rigidbody playerRb;
    public GameManager gameManager;
    public InputActionReference jump;

    //jumping
    public float jumpForce = 5f; // 跳躍力道
    public float jumpCooldown = 1f; // 跳躍冷卻時間
    public bool canJump = true;
    public bool isGrounded = true;

    private void Start()
    {
        playerRb = GetComponent<Rigidbody>();

        if (playerRb == null)
        {
            Debug.LogError("找不到 Rigidbody，請確保此腳本掛在有 Rigidbody 的物件上！");
        }
    }

    private void Update()
    {
        // VR 控制器按鈕輸入
        if (jump.action.WasPressedThisFrame() && canJump && isGrounded)
        {
            Debug.Log("VR 控制器按鈕按下");
            jumpStart();
        }

        // 鍵盤按鍵輸入 (空白鍵)
        if (Input.GetKeyDown(KeyCode.Space) && canJump && isGrounded)
        {
            Debug.Log("空白鍵按下");
            jumpStart();
        }
    }

    public void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.CompareTag("Gate"))
        {
            Debug.Log("Hi"); // 測試觸發
            if (gameManager.gateChargeMax)
            {
                Debug.Log("Why"); // 測試觸發
                SceneManager.LoadScene("2_Hold2");
            }
        }
    }

    public void OnTriggerExit(Collider other)
    {
        ClimbProvider climbProvider = GetComponent<ClimbProvider>();
        if (climbProvider != null && climbProvider.locomotionPhase != LocomotionPhase.Moving)
        {
            playerRb.useGravity = true;
        }
        if (other.gameObject.CompareTag("Ground"))
        {
            isGrounded = false; // 玩家離開地面
        }
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.CompareTag("Water"))
        {
            GameManager.instance.PlayerTouchWater();
        }
        if (collision.gameObject.CompareTag("Ground"))
        {
            isGrounded = true; // 確保玩家在地面上
        }
    }

    //jump
    private void jumpStart()
    {
        if (playerRb == null) return;

        playerRb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse); // 施加向上的力
        canJump = false;
        isGrounded = false;
        Invoke(nameof(ResetJump), jumpCooldown); // 設定冷卻時間
    }

    private void ResetJump()
    {
        canJump = true;
    }
}
